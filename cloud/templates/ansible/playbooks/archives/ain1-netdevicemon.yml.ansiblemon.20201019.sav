---
- name: "Network devices information gathering"
  hosts:
    sbxnxos
    sbxiosxe
    sbxiosxr
  gather_facts: no
  timeout: 720
  vars:
    ansible_command_timeout: 720
    ansible_connection_timeout: 720
    resultdir: "/tmp/facts"
    timecode: "{{ lookup('pipe','date +%Y%m%d%H') }}"
    factsjsonfile: "{{ resultdir }}/{{ inventory_hostname }}-facts.json"
    configfile: "{{ resultdir }}/{{ inventory_hostname }}-confg"
    hostinfosmdfile: "{{ resultdir }}/{{ inventory_hostname }}-infos.md"
    git_url: "git@bitbucket.org:poubl31/automationprivaterepo.git"
    git_username: poubl31
    git_email: poubl31@gmail.com
    git_key: "{{ lookup('file','~/.ssh/id_rsa') }}"
    git_branch: "master"
    git_msg: "update files with ansible"
    git_remove_local: false
  tasks:

    ############################################################################
     #                                                                        #
      #                  {{ resultdir }} directory creation                  #
     #                                                                        #
    ############################################################################
    - name: "Create {{ resultdir }} directory"               ##     DIR       ##
      tags: [ cisco, nxos, ios, iosxr, junos, stdout ]
      run_once: true
      file: path="{{ resultdir }}" state=directory mode="0755"

    ############################################################################
     #                                                                        #
      #                         Git initialisation                           #
     #                                                                        #
    ############################################################################
    - name: "GIT clone"                                      ##     GIT       ##
      tags: [ cisco, nxos, ios, iosxr, junos, git, stdout ]
      run_once: true
      git: repo="{{ git_url }}" dest="{{ resultdir }}" accept_hostkey="yes" key_file="{{ git_key }}"
    - name: "GIT username"                                   ##     GIT       ##
      when: git_username is defined
      tags: [ cisco, nxos, ios, iosxr, junos, git, stdout ]
      run_once: true
      shell: git config user.name "{{ git_username }}"
      args:
        chdir: "{{ resultdir }}"
    - name: "GIT email"                                      ##     GIT       ##
      when: git_email is defined and git_username is not defined
      run_once: true
      tags: [ cisco, nxos, ios, iosxr, junos, git, stdout ]
      shell: git config user.email "{{ git_email }}"
      args:
        chdir: "{{ resultdir }}"

    ############################################################################
     #                                                                        #
      #                          Get Ansible Facts                           #
     #                                                                        #
    ############################################################################
    - when: ansible_network_os == "nxos"                     ##     NXOS      ##
      name: "NXOS - Get device facts"
      tags: [ cisco, nxos, facts, stdout ]
      ignore_errors: true
      cisco.nxos.nxos_facts:
        gather_subset: all
        gather_network_resources:
        - vlans
        - lacp
        - lacp_interfaces
        - bfd_interfaces
      register: factsdictnxos
    - when: ansible_network_os == "nxos"                     ##     NXOS      ##
      name: "NXOS - Update final facts"
      set_fact: factsdict="{{ factsdictnxos }}"
    - when: ansible_network_os == "ios"                      ##     IOS       ##
      name: "IOS - Get device facts"
      tags: [ cisco, ios, facts, stdout ]
      ignore_errors: true
      cisco.ios.ios_facts:
        gather_subset: all
        gather_network_resources:
        - lacp
        - lacp_interfaces
      register: factsdictios
    - when: ansible_network_os == "ios"                      ##     IOS       ##
      name: "IOS - Update final facts"
      set_fact: factsdict="{{ factsdictios }}"
    - when: ansible_network_os == "iosxr"                    ##     IOSXR     ##
      name: "IOSXR - Get device facts"
      tags: [ cisco, iosxr, facts, stdout ]
      ignore_errors: true
      cisco.iosxr.iosxr_facts:
        gather_subset: all
        gather_network_resources:
        - lacp
        - lacp_interfaces
      register: factsdictiosxr
    - when: ansible_network_os == "iosxr"                    ##     IOSXR     ##
      name: "IOSXR - Update final facts"
      set_fact: factsdict="{{ factsdictiosxr }}"
    - when: ansible_network_os == "junos"                    ##     JUNOS     ##
      name: "JUNOS - Get device facts"
      tags: [ cisco, junos, facts, stdout ]
      ignore_errors: true
      junipernetworks.junos.junos_facts:
        gather_subset: all
        gather_network_resources: all
      register: factsdictjunos
    - when: ansible_network_os == "junos"                    ##     JUNOS     ##
      name: "JUNOS - Update final facts"
      set_fact: factsdict="{{ factsdictjunos }}"

    ############################################################################
     #                                                                        #
      #                         Dump Ansible Facts                           #
     #                                                                        #
    ############################################################################
    - name: "Dump facts to file"                             ##     FACTS     ##
      tags: [ cisco, nxos, ios, iosxr, junos, facts ]
      ignore_errors: true
      copy:
        content="{{ factsdict }}"
        dest="{{ factsjsonfile }}"

    ############################################################################
     #                                                                        #
      #                         Generate Config Backup                       #
     #                                                                        #
    ############################################################################
    - name: "Generate configuration backup file"             ##    CONFIG     ##
      tags: [ cisco, ios, ioxr, nxos, junos, config ]
      ignore_errors: true
      shell: jq .ansible_facts.ansible_net_config "{{ factsjsonfile }}" | sed -e "s/^\"//" -e "s/\"$//" -e "s/\\\n/\n/g" > "{{ configfile }}"
      args:
        executable: /bin/bash

    ############################################################################
     #                                                                        #
      #                        Generate README.md Table                      #
     #                                                                        #
    ############################################################################
    - name: "Generate { resultdir }}/README.md file"         ##   README.md   ##
      tags: [ cisco, ios, ioxr, nxos, junos, infos ]
      ignore_errors: true
      run_once: true
      shell: /bin/echo -e "# Ansible Network Automation Repo\n[TOC]\n# Device List\n\n| alias | hostname | system | version | iostype | platform | serialnum |\n| ----- | -------- | ------ | ------- | ------- | -------- | --------- |" > "{{ resultdir }}/README.md"
      args:
        executable: /bin/bash
    - name: "Update { resultdir }}/README.md file"           ##   README.md   ##
      tags: [ cisco, ios, ioxr, nxos, junos, infos ]
      ignore_errors: true
      shell: |
        /bin/echo -e "|{{ inventory_hostname | default('null') }}|{{ ansible_host | default('null') }}|{{ factsdict.ansible_facts.ansible_net_system | default('null') }}|{{ factsdict.ansible_facts.ansible_net_version | default('null') }}|{{ factsdict.ansible_facts.ansible_net_iostype | default('null') }}|{{ factsdict.ansible_facts.ansible_net_platform | default('null') }}|{{ factsdict.ansible_facts.ansible_net_serialnum | default('null') }}|" >> "{{ resultdir }}/README.md"
      args:
        executable: /bin/bash

    ############################################################################
     #                                                                        #
      #                   Generate Interfaces Markdown Table                 #
     #                                                                        #
    ############################################################################
    - name: "Generate interfaces md file"                    ##  INTERFACES   ##
      tags: [ cisco, nxos, ios, ioxr, junos, interfaces ]
      ignore_errors: true
      shell: |
        /bin/echo -e "\n# Ansible Network Automation Repo\n# {{ inventory_hostname }} -  {{ ansible_network_os }} - Interface infos\n\n| name | state | type | mac | bandwidth | speed | duplex | mode | mtu | description | ip  | mask |\n| ---  |  ---  | ---  | --- | --------- | ----- | ------ | ---- | --- | ----------- | --- | ---- |" > "{{ hostinfosmdfile }}"
        ( jq -e '.ansible_facts.ansible_net_interfaces | keys[] as $k | "|\($k)|\(.[$k]|.state)|\(.[$k]|.type)|\(.[$k]|.macaddress)|\(.[$k]|.bandwidth)|\(.[$k]|.speed)|\(.[$k]|.duplex)|\(.[$k]|.mode)|\(.[$k]|.mtu)|\(.[$k]|.description)|\(.[$k]|.ipv4.address)|\(.[$k]|.ipv4.masklen)|"' "{{ factsjsonfile }}" | sed -e "s/^\"//" -e "s/\"$//" || /bin/echo -e "| no data | no data | no data | no data | no data | no data | no data | no data | no data | no data | no data | no data |" ) >> "{{ hostinfosmdfile }}"
      args:
        executable: /bin/bash

    ############################################################################
     #                                                                        #
      #                   Generate VLANs Markdown Table                      #
     #                                                                        #
    ############################################################################
    - name: "Generate VLANs md file"                         ##    VLANs      ##
      tags: [ cisco, nxos, ios, iosxr, junos, vlans ]
      ignore_errors: true
      shell: |
        /bin/echo -e "\n# {{ inventory_hostname }} - {{ ansible_network_os }} - VLANs infos\n\n| vlan_id | name | mode | enabled | state |\n| ------- | ---- | ---- | ------- | ----- |" >> "{{ hostinfosmdfile }}"
        ( jq -e '.ansible_facts.ansible_network_resources.vlans | keys[] as $k | "|\(.[$k]|.vlan_id)|\(.[$k]|.name)|\(.[$k]|.mode)|\(.[$k]|.enabled)|\(.[$k]|.state)|"' "{{ factsjsonfile }}" | sed -e "s/^\"//" -e "s/\"$//" || /bin/echo -e "| no data | no data | no data | no data | no data |" ) >> "{{ hostinfosmdfile }}"
      args:
        executable: /bin/bash

    ############################################################################
     #                                                                        #
      #                       Create Facts MD file                           #
     #                                                                        #
    ############################################################################
    - name: "Create Facts MD files"                          ##     FACTS     ##
      tags: [ cisco, ios, ioxr, nxos, junos ]
      ignore_errors: true
      shell: (/bin/echo -e '```json' ; cat "{{ factsjsonfile }}" | python -m json.tool ; /bin/echo -e '```') > "{{ factsjsonfile }}.md"
      args:
        executable: /bin/bash

    ############################################################################
     #                                                                        #
      #                   Update README Markdown File                        #
     #                                                                        #
    ############################################################################
    - name: "Update README.md file"                          ##   README.md   ##
      tags: [ cisco, ioxr, nxos, vlans ]
      run_once: true
      ignore_errors: true
      shell: |
        /bin/echo -e "\n# Devices Infos\n" >> "{{ resultdir }}/README.md"
        find "{{ resultdir }}" -name "*-infos.md" -printf "- [%f](%f)\n" >> "{{ resultdir }}/README.md"
        /bin/echo -e "\n# Configs\n" >> "{{ resultdir }}/README.md"
        find "{{ resultdir }}" -name "*-confg" -printf "- [%f](%f)\n" >> "{{ resultdir }}/README.md"
        /bin/echo -e "\n# Ansible Facts (source)\n" >> "{{ resultdir }}/README.md"
        find "{{ resultdir }}" -name "*facts.json" -printf "- [%f](%f)\n" >> "{{ resultdir }}/README.md"
        /bin/echo -e "\n# Ansible Facts (markdown)\n" >> "{{ resultdir }}/README.md"
        find "{{ resultdir }}" -name "*facts.json.md" -printf "- [%f](%f)\n" >> "{{ resultdir }}/README.md"
      args:
        executable: /bin/bash

    ############################################################################
     #                                                                        #
      #                             GIT Push                                 #
     #                                                                        #
    ############################################################################
    - name: "GIT add all new files"                          ##     GIT       ##
      run_once: true
      tags: [ cisco, nxos, ios, iosxr, junos, git ]
      shell: git add -A
      args:
        chdir: "{{ resultdir }}"
    - name: "GIT commit"                                     ##     GIT       ##
      run_once: true
      tags: [ cisco, nxos, ios, iosxr, junos, git ]
      shell: 'git commit -a -m "{{ git_msg }}"'
      args:
        chdir: "{{ resultdir }}"
      ignore_errors: true
    - name: "GIT push"                                       ##     GIT       ##
      run_once: true
      tags: [ cisco, nxos, ios, iosxr, junos, git ]
      shell: git push --force
      args:
        chdir: "{{ resultdir }}"

    ############################################################################
     #                                                                        #
      #                               Debug                                  #
     #                                                                        #
    ############################################################################
    - when: ansible_network_os == "nxos"                     ##     NXOS      ##
      name: "Debug - {{ ansible_network_os }} - {{ inventory_hostname }} - Dump interfaces facts to stdout"
      tags: [ cisco, stdout, never ]
      debug:
        var: item
      loop: "{{ factsdict | community.general.json_query('ansible_facts.ansible_network_resources.interfaces[*].name') }}"

